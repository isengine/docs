# Настройки шаблона

{
	"libraries" : [
	раздел, который управляет библиотеками
	
		"name",
		загрузка библиотеки 'name' из системной папки
		
		"name:folder:v:cdn:js,!css:develop",
		здесь перечислены все параметры, однако любой из них, кроме 'name' можно пропустить, оставив пустым
		загрузка библиотеки 'name' из папки 'folder' с версией 'v'
		в варианте 'cdn' (вариант берется из настроек библиотеки в базе данных)
		включая/исключая типы (в данном случае включая все файлы 'js' и исключая все файлы 'css')
		разрешить загрузку только в определенном месте шаблона, а для php-библиотек только в определенном режиме DEFAULT_MODE
		
	],
	
	"options" : [
	раздел, который задает опции шаблона
	
		"sortinghead",
		данная опция сортирует вывод в шапке библиотек на скрипты и стили, которые загружает в соответствующие места,
		без этой опции все компоненты библиотек грузятся последовательно, как они были прописаны в базе данных
		
		"scriptoptimise",
		данная опция помещает все скрипты в конец кода
		
		"updatelocal",
		данная опция добавляет ко всем скриптам и стилям префикс даты последнего изменения настроек шаблона,
		он никак не сказывается на работе, зато таким образом можно обновить скрипты и стили в кэше браузера
		
		"dictionary",
		включает поддержку словарей
		
		"inspect",
		включает инспекцию системы и шаблона в частности, выводя краткую информацию в конец шаблона и расширенную - в консоль
		
		"bodycustom",
		отменяет загрузку тега 'body' из шаблона по-умолчанию,
		но вместе с ним по-умолчанию не загружаются скрипты и библиотеки в позиции 'bodyopen'
		
		"bodynoclasses",
		отменяет классы в теге 'body' в шаблоне по-умолчанию
		
		"bodyh1",
		создает тег 'h1' с классом 'autoseo' сразу после 'body' в шаблоне по-умолчанию
		в случае, если вы включили 'bodycustom', вы можете загрузить значение из $seo -> h1
		
		"cookiesagree"
		выводит информацию о принятии кук с сохранением состояния в сами куки
		
	],
	
	"variables" : {
	раздел, который управляет переменными в шаблоне
	
		"name:target:type" : "value"
		здесь задается переменная 'name' в цель 'target' с типом 'type' и значением 'value'
		'target' может иметь значения 'php' или 'js', или быть пустым, тогда переменная будет назначаться и для php, и для js
		для php переменные назначаются в массив $template -> var[], и управляются функцией variable()
		если указать не пустой 'type', то значение 'value' будет передано в javascript "как есть", то есть не преобразовано в строку
		это может быть полезно для числовых значений, массивов, true/false и т.п., но может привести к ошибке, если не следить за переменной
		
	},
	
	"assets" : {
	раздел, который управляет дополнительными файлами шаблона
	файлы грузятся в том порядке, в котором они перечислены
	
		"css" : [
		раздел css-стилей
		по аналогии работают разделы 'scss' и 'less', но 'css' всегда имеют преимущество перед остальными
		
			"name"
			здесь указывается имя файла стиля, который будет загружен в шаблон
			
			"folder/name"
			если вы хотите загружать стиль из вложенной папки, вам нужно прописывать путь в таком виде
			причем, слеш обязательно должен быть таким, т.к. именно такой слеш используется в html-разметке
			
		],
		
		"js" : [
		раздел java-скриптов
		
			"folder/name:place"
			'folder' и 'name' используются аналогично стилям
			'place' указывает на место в шаблоне, где нужно этот скрипт запустить
			может иметь одно из значений: 'headopen', 'headclose', 'bodyopen', 'bodyclose' или пустое, что равняется 'headopen'
			фактически, при использовании стандартного шаблона, необходимости в разделении и использовании 'headopen' и 'headclose' нет,
			а зачастую ее нет и для 'bodyopen', т.к. скрипты загружаются последовательно друг за другом,
			перед ними только мета-данные, а между ними - стили
			
		],
		
		"preload" : [
		раздел ссылок, которые должны быть загружены по правилу 'preload'
		
			"folder/name.ext:type"
			ссылки в данном разделе необходимо указывать полностью, со слешами и расширением, все ссылки будут построены относительно папки 'assets'
			вторым параметром можно указать тип ссылки на выбор: 'script', 'style', 'image', 'font', 'audio', 'video'
			
			если вам нужно загрузить части библиотек, то вы должны прописать их в базе данных для конкретной библиотеки, также в разделе 'preload'
			в том случае ссылки будут построены относительно месторасположения папки библиотеки
			в остальном же все похоже
			
		]
		
	}
}

# Шаблон по-умолчанию

Есть всего четыре папки в папке шаблона, которые поддерживаются системой и предопределены в функциях:

	- 'inner' - определяется по-умолчанию, содержит файлы и папки внутренних страниц и разделов сайта
	- 'head' - содержит файлы шапок по названию страниц, если для каких-то страниц сайта требуется дополнительный код в шапке
	- 'wrapper' - содержит файлы оберток
	- 'html' - содержит прочие файлы, необходимые в шаблоне

Существует также еще одна папка, общая для всех шаблонов, содержащая различные элементы, предустановленные на сайте:

	- 'item'

Вызов файлов из этих папков происходит с помощью функции:

	page('name', 'type');
	
	'name' - это имя файла без расширения
	'type' - это тип папки
	
Если вы хотите вызвать файл из вложенной папки, то можете использовать в качестве 'name' одну из следующих записей:

	'folder:name'
	'folder' . DS . 'name'

Помимо папок, существуют стандартные файлы, которые должны лежать в папке 'html':

	- 'head' - файл расширения шапки для всех страниц шаблона
	- 'nopage' - файл с информацией об отсутствии контента
	- 'footer' - файл расширения подвала для всех страниц шаблона

Шаблон по-умолчанию можно запустить так:

	page('autoload', 'item');

# Порядок загрузки

1.

Грузится стандартная шапка шаблона. Это доктайп, заголовки, мета-теги из настроек СЕО и умолчаний, а также инспектор и другие компоненты - библиотеки, стили, скрипты - согласно заданным опциям и настройкам шаблона. Также здесь назначаются переменные, общие для php и js, заданные в разделе 'variables' настроек шаблона.

Также в настройках шаблона вы можете задать переменные, которые загрузятся на данном этапе и будут доступны в дальнейшем.

Вы можете подключить дополнительные файлы:
	- если в папке 'html' шаблона существует php-файл с названием 'head', то он загружается в самом конце шапки на всех страницах
	- если в папке 'head' существует php-файл с названием страницы, то он загружается в самом конце шапки

2.

Сразу после шапки, загружается тег 'body' с классами по-умолчанию - это классы:

	- по названию страницы
	- по специальному разделу
	- по устройству
	- по операционной системе (для мобильных)

Загрузку этих классов можно отключить с помощью опции 'bodynoclasses'

Внутри тега 'body' загружаются скрипты в позиции 'bodyopen'

Если включена опция 'bodyh1' и назначен параметр 'h1' в seo, то сразу после скриптов создается тег 'h1' с классом 'autoseo'.

Вы также можете отключить его вывод, не включая опцию 'bodyh1'. Это может быть полезным, например, если заголовки прописывает специалист по СЕО, но они включаются в шаблоне не сразу после 'body', а ниже.

3.

Далее идет загрузка внутренних страниц, согласно роутера.

Внутренние страницы оборачиваются в две обертки в папке 'wrapper' - это файлы 'home_before' или 'inner_before' в начале и 'home_after' или 'inner_after' в конце. При этом 'home' и 'inner' в названиях определяют обертки для главной и внутренних страниц сайта по-отдельности.

Сама внутренняя страница определяется следующим образом.

Если в структуре она была определена со свойством 'content', то загружается модуль контента.

В другом случае пытается загрузиться страница из папки 'inner'.

Если же обе попытки оказались неудачными, сначала запрашивается 'nopage' из папки 'html', а затем, в случае ее остутствия, выводится стандартная страница об отсутствии материала.

4.

Заканчивается загрузка подвалом.

Здесь по-очереди:

	- если в папке 'html' шаблона существует php-файл с названием 'footer', то он загружается в самом начале шапки на всех страницах
	- грузится фронтэнд (будет изменено)
	- оптимизируются скрипты ('scriptoptimise')
	- выводится предупреждение о куках ('cookiesagree')
	- последний раз выводятся скрипты и библиотеки в позиции 'bodyclose'
	- загружаются счетчики
	- завершается работа инспектора ('inspect')
	- выводятся ссылки на бэкап (будет изменено)




