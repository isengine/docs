# Определение терминологии

Когда мы говорим о любой системе в частностях, то постоянно употребляем такие слова, как "элементы", "компоненты", "модули" или "настройки", "опции", "параметры", которые не являются терминами, а служат по большей части синонимами, их смысл зависит от контекста, и все это вместе вносит путаницу. Поэтому было решено использовать строгую терминологию, которая позволит отличить одно от другого и дать понятие, о чем идет речь в каждом конкретном случае.

# Модель

Так, любая система, и наша не исключение, состоит из частей. Речь сейчас не о файлах, папках и организации файловой системы. Части системы в данном случае - это блоки, которые обычно изображаются на схемах.

В самом крупном виде система представляет собой модель, которая разделена на условные блоки. Это может быть MVC или аналогичная. Но мы рассматриваем систему так только лишь для понимания, как те или иные части системы связаны между собой и как должны функционировать. Т.е. представление системы в виде модели носит больше вспомогательный характер.

Здесь важно понять, что модель в контексте архитектуры системы не имеет значение. Потому что архитектурно система состоит из компонентов.

# Компоненты

Архитектурно система разделена на большее число блоков, которые не просто описывают некую модель, а являются важнейшими частями системы. Эти части или блоки мы назовем КОМПОНЕНТАМИ.

Компоненты могут относится к разным блокам общей модели системы, причем несколько компонентов могут относится к одному и тому же блоку. Однако и компоненты, в свою очередь, могут состоять из нескольких блоков, представляя собой модель.

Это похоже на пошаговое структурирование. Когда мы смотрим на систему в целом, мы видим модель. Когда мы рассматриваем ее ближе, мы видим, что блоки модели состоят из компонентов. Когда же мы начинаем рассматривать каждый компонент, то понимаем, что он тоже представляет собой модель, которая так же состоит из блоков, которые в свою очередь состоят из блоков и так далее.

В общем случае нам важно понимать только то, что система делится части и эти части мы называем компонентами.

Вот список компонентов системы:

	контент
	ядро (классы, функции, драйверы, процессы, роутер, шаблонизатор, настройки, константы)
	языки
	библиотеки
	модули
	шаблоны
	хранилище
	кэш
	логирование
	база данных

# Файловая структура

Файловая структура - это древовидная структура системы, представленная набором файлов и папок.

Корневую папку системы мы будем называть корнем.

В корне лежат всего несколько файлов:

	* index.php - это индексный файл, необходимый для запуска сайта,
	
	* configuration.php - это файл инициализации настроек системы,
	* configuration.ini - это непосредственно файл настроек системы,
	
	* .htaccess / nginx.conf - это файл конфигурации сервера
	! если вы используете nginx, то его нужно будет положить в соответствующую папку сервера, заменив исходный nginx.conf
	
	* служебные файлы, например, сервиса github, которые не читаются и не используются системой

Каждый компонент представляет собой папку с заданным названием. По-умолчанию это:

	base - база данных (только если в настройках используется локальная база данных)
	cache - кэш
	content - контент
	core - ядро (классы, функции, драйверы, процессы, роутер, шаблонизатор, дистрибутив для инсталлятора)
	languages - языки
	libraries - библиотеки
	local - хранилище
	log - логирование
	modules - модули
	templates - шаблоны

# Загрузка или инициализация компонентов

На разных этапах загрузки системы может понадобится инициализировать компоненты в совершенно разном порядке. Это продиктовано невозможностью сервера сохранять состояние между запросами.

Все дело в том, что каждый запрос сервер считает новым. Таким образом, загрузка каждой страницы сайта, каждое обновление уже загруженной страницы сайта, отправка формы, даже запрос по ajax - все это принуждает сервер загружать систему с самого начала. При этом уже самой системе необходимо понимать, что за запрос поступил с сервера или от пользователя и в зависимости от этого распределять нагрузку, загружая одни компоненты и пропуская другие.

Например, при обычной загрузке страницы сайта состав компонентов и порядок их инициализации один, а при выводе ошибок - уже другой, при поступлении запроса - третий и т.д.

Загружать все компоненты разом в память сервера было бы опрометчиво, т.к. при большой частоте запросов это создаст большую нагрузку и может остановить работу сервера. Причиной таких запросов может быть большое число пользователей, а может быть и специально организованная хакерская атака. Подробнее об этом написано в разделе [безопасность].

Здесь нам важно понимать лишь то, что инициализация компонентов должна быть независимой.

Она производится через базовую функцию

	init('component');
	
	* component - название компонента, который нужно инициализировать
	
Название также поддерживает атрибуты, это может помочь, когда компонент нужно загрузить не целиком, а только его часть. Это актуально, например, для ядра - когда нужно инициализировать проверку или загрузить только базовые функции. Например:

	init('verification', 'ban');
	init('functions', 'base');

Такая возможность позволяет гибко управлять компонентами, загружая их по мере необходимости и только при определенных условиях.

# Библиотеки

Теперь библиотеки поддерживают версии и опции загрузки








