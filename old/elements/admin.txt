
Работа с админкой происходит так

[пользователь заходит на сайт]
дальше все зависит от того, какой путь был запрошен
браузером пользователя или перенаправлением сервера
|                                     |
[site.com/...]                        [site.com/administrator/...]
была открыта главная                  была открыта любая страница
или любая другая страница,            админской части
кроме админской части                 |
|                                     [/administrator/index.php]
| <----------------------------------- задаем константу isADMIN
|
[/index.php]
приступаем к загрузке сайта
|
[?query]
проверяем запросы
и если они были,
вызываем обработчик
|
| -----------------------------------> [/includes/preprocessor.php]
| <----------------------------------- обработка события
|                                      |
[/includes/templates.php]              если в конце обработки
если была задана константа isADMIN     скрипт не прерывается (exit/die),
или был задан кук AID,                 то сервер продолжает выполнение
то пользователь перенаправляется
на обработчик админки
|
| -----------------------------------> [/includes/administrator.php]
| <----------------------------------- обработчик админки
|                                      |
[... /includes/templates.php]          если не был задан кук AID,
продолжается загрузка сайта            но была задана константа isADMIN
                                       вызываем шаблон авторизации и завершаем скрипт
                                       или проверяем AID, задаем настройки админки,
                                       выполняем доп.действия и возвращаемся
                                       к подготовке и загрузке шаблона


[/includes/administrator.php]
обработчик админки

здесь задаются условия проверки входа в админку

самое проблемное - это то, что при каждой перезагрузки страницы
или при переходе с одной страницы на другую
все переменные, которые мы можем определить, сбрасываются;
а переменные, значение которых не сбрасывается, две:

1. это данные сессии, которые хранятся вроде бы на стороне сервера,
   но на самом деле хранятся у пользователя в куках;
   их можно настроить для хранения на сервере,
   но это влечет ряд проблем - настройки, вопрос с нагрузкой сервера
   и вопрос с безопасностью, т.к. через код возможен доступ к серверу

2. это данные куки, которые хранятся на стороне пользователя;
   здесь вопросов два:

   1. с безопасностью, или каким образом защитить куки от кражи и подмены,
   но он решается просто - даже если была кража, злоумышленник не должен
   получить доступ ко всему сайту, а только к ограниченным настройкам
   ну и пользователь должен сам обеспечивать защиту своих данных
   на своем компьютере, а его куки как раз и являются такими данными;
   мы можем фиксировать входы пользователей в админку и уведомлять их,
   чтобы они срочно связались с администраторами сайтом, если например,
   вход был осуществлен с другого ip, с другого браузера или с другой системы

   2. с запретом на использование кук, но это на самом деле не проблема,
   т.к. относится не к работе сайта в целом, а к работе с админкой,
   и в данном случае разговор всегда один - включай куки или не работай

итак, условия проверки входа в админку могут задаваться по разному -
стартом сессии с назначением переменных или выдачей кука;

в обоих случаях мы сможем проверить, что этот пользователь уже вошел в админку
и не требовать с него повторной аутентификации

плюс мы можем шифровать выданное значение в виде токена,
учитывая времени его выдачи, ip адреса, данных браузера и системы пользователя
и проверять на актуальность и соответствие этим данным,
тогда даже кража и подделка токена не будет иметь значение,
потому что придется красть или подделывать его постоянно,
т.е. каждый раз, как заканчивается время жизни этого токена
(например, токен находится в промежутке от минус пяти минут до нуля минут
относительно текущих даты и времени сервера,
а также номер подключения увеличился на единицу);
если, например, номер подключения становится больше 100,
мы просим заново пройти авторизацию, подтвердить логин или пароль, ввести секретный код;
плюс мы можем в открытую запоминать время входа пользователя
или время совершения им последнего действия, или время окончания загрузки страницы
и по истечении, например, пяти минут, выдавать пользователю сообщение,
или выкидывать с сайта, или просить повторную авторизацию,
или подтвердить логин или пароль, или ввести секретный код,
но это уже с подключением скриптов, либо с отслеживанием при загрузке новой страницы

другим моментом является выход пользователя из админки -
при этом должны стираться все данные, такие как переменные кук и сессий,
а также сессия должна закрываться, причем делать это полностью, стирая все следы,
в том числе удалять данные о сессии, которые, как было сказано выше, также хранятся в куках

в данном случае реализован самый простой способ -
при авторизации мы выдаем кук с идентификатором пользователя - AID, т.е. Admin Id,
сейчас это просто цифры '123', безо всяких токенов и их проверки
при загрузке страницы проверяем его наличие и значение, а при выходе - стираем

Обработчик админки пока работает так

Проверяется AID (Administrator Identificator):

1. AID не был задан

Это значит, что пользователь не авторизован под админкой.

Делаем доп.проверку файла, который по-умолчанию вызывает наш обработчик (/administrator/index.php)
Все хорошо, если этот файл есть, а его размер и содержимое соответствуют постоянным данным
Таким образом, это является единственным разрешенным входом в систему

Мы вызываем шаблон авторизации (/templates/administrator/authorise/template.php)
В этом шаблоне есть только одна важная вещь - форма авторизации, которая перенаправляет нас на главную страницу
а в настройках запроса query задан обработчик 'authorise'

Таким образом, обработка форма проходит в штатном режиме, через заданный обработчик,
который и занимается всей дальнейшей проверкой авторизации ()

Пока этот обработчик примитивен:
	При успешной авторизации, задает AID
	При неуспешной авторизации, должна происходить проверка пользователя.
	Но на данный момент авторизация сводится к проверке логина и пароля на числа 123, а AID задается числом 111

2. AID был задан

Идет проверка.

1. Если AID не проходит проверку, то запускается соответствующих обработчик событий.
В идеальном случае, он открывает сессию, соединяется с базой данных и начинает записывать данные
о неудачной попытке входа. Он также может уведомлять о неудачной попытке по e-mail'y пользователя.

Если, например, попытки входа превысили определенное число, начинает выдаваться капча,
а если попытки входа превысили максимально допустимое количество, то пользователю ставится бан по ip
на определенный промежуток времени, например, на один час. Пользователь также предупреждается о
причине бана и ему предлагается сообщить на ящик техподдержки, что позволит службе поддержки,
если пользователь добросовестный, отследить хакерские атаки и уязвимости системы.

Однако, если на этом ip сидят несколько пользователей и один может быть вполне добросовестный,
либо это был подлог, чья-то шутка, завис компьютер, или была хакерская атака на его аккаунт,
или просто пользователь на самом деле забыл свой пароль и перебирает разные варианты,
то бан можно снять. Для этого нужно пройти небольшую процедуру разблокировки,
введя свои регистрационные данные на отдельной странице. После этого бан снимается и пользователь
снова может зайти на сайт, но придется опять залогиниться.

На данный момент проверки AID нет, затем в тестовом режиме будет просто проверка AID на число 111

2. Если AID проходит проверку успешно, то происходит необходимая обработка данных
(добавляется структура админки, пользователю разрешается доступ к закрытой части сайта и закрытым данным,
а также, если стоит счетчик попыток входа, он сбрасывается, т.е. вошедший пользователь считается "чистым")
и дальше продолжается загрузка сайта

НО! Теперь, по правилам роутинга, пользователь перенаправляется на админский шаблон.

И это очень хорошо! Хотя у нас админские шаблоны и не лежат в админке, но они лежат в шаблонах
Т.е. на лицо распределение ресурсов. А в админской папке лежат чисто настройки системы, всякие админские
функции и прочее



При входе в админку, к общей структуре добавляется структура админки, прописанная в файле administrator.ini

Таким образом, для админки может задаваться меню. Админское меню имеет такое свойство - если в обычном меню
домашняя ссылка задается через home, то здесь домашняя ссылка в админку задается через имя самой админки,
по-умолчанию administrator.

Также по-умолчанию меню использует только элемент структуры administrator. Но все это можно кастомизировать.


