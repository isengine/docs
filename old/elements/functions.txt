Функции, как собственно и ядро сайта, лежат в папке includes

Для классов определена папка classes
Для функций - папка functions

Функции разделены на 3 группы:
	- базовые
	- бд
	- кастомные

Базовые функции лежат в подпапке base и разделены, в свою очередь, на 4 типа:
	- функции по работе с данными и по обработке данных
	- функции для работы с файловой системой
	- основные системные функции
	- математические функции

(!) основные системные функции в релизе предлагаю переименовать из файла "functions.php" в файл "system.php"

Каждый тип представляет собой файл, в котором собраны все функции данного типа.

Функции по работе с БД представляют собой драйвера - это файлы с одним названием "functions.php", которые разложены в соответствующие папки.

Например, функции по работе с mysqli - в папке mysqli, по работе с pdo - в папке pdo, функции по работе с локальными файлами - в папке local.

Работа с базой данных описана в разделе справки "database"

И наконец, 3я группа - кастомные функции. Они лежат в папке "custom".

Загрузка происходит для всего сайта, если вы укажете название файла (без расширения) в разделе (файле или бд - в дальнейшем) "functions"

(!) Однако теперь система загрузки функций, да и собственно вся структура будет сильно меняться.

===============
Новая структура
===============

Папка "includes" будет по прежнему представлять ядро сайта

classes - папка для системных классов
functions - папка для базовых функций
database - папка для драйверов БД и функций по их работе
custom - папка для пользовательских функций и классов

Функции теперь будут грузиться по следующей схеме:

1. Загружаются все системные классы и функции
2. Загружаются драйвера для работы с базами данных (папка по типу базы, указанному в константе DB_TYPE, файл - driver.php, который уже подгружает все остальные файлы в папке)
3. Продолжается загрузка сайта
4. Но после роутинга, при инициализации шаблона, идет повторное обращение к ядру - кастомным функциям
5. Здесь читаются настройки функций (в файле "functions.ini" или в разделе бд), где функции разбиты по разделам:
	base - те, которые грузятся в любом случае
	далее те, которые грузятся по имени шаблона
6. Загрузка функций происходит из папки "custom", из подпапки с тем же названием, которое указано в файле.

Например, файл "functions.ini":
{
	"base" : ["a", "b"],
	"administrator" : ["c"],
	"default" : ["d"],
	"personal" : ["d"],
	"private" : ["d", "e"]
}

Так, в случае загрузки шаблона администратора, загрузятся файлы:
	includes\custom\a.ini
	includes\custom\b.ini
	includes\custom\c.ini

При загрузке шаблона по-умолчанию, загрузятся файлы:
	includes\custom\a.ini
	includes\custom\b.ini
	includes\custom\d.ini

При загрузке приватного шаблона, загрузятся файлы:
	includes\custom\a.ini
	includes\custom\b.ini
	includes\custom\d.ini
	includes\custom\e.ini

К каждому файлу обязательно наличие файла-описания с расширением ".ini", в котором содержится:

{
	"path" : "" - название файла, который нужно загрузить из папки
	"version" : "" - минимальная версия php, на которой это все будет работать
	"libraries" : [] - массив с названиями библиотек, необходимых для работы
	"punctions" : [] - массив с названиями функций php, необходимых для работы
}

Перед загрузкой класса все эти настройки будут проверяться, и если в текущей сборке php есть несоответствие, будет выведена страница ошибки.

На ней будут перечислены требования к серверу и сборке php, которые нужны для работы.

Если в шаблоне включен режим разработчика, то вместо страницы ошибки, все предупреждения будут выведены в конце страницы в специальном закрытом блоке.

НЕ-НЕ-НЕ-НЕ-НЕ-НЕ-НЕ-НЕ !!!!
(!) Либо засовывать описание всех функций в файл "functions.ini", а загрузку функций переносить в "settings.ini" шаблона,
Либо тогда уж разделять и функции, и файлы-описания библиотек (да и модулей тоже бы по-хорошему) - чтобы изолировать их друг от друга и от ядра сайта.
Тогда и обновление, и установка будет проходить проще - скопировал папку и файлик-описание, объявил где надо и АЛГА!

НО ВОТ ВОПРОС: если функции грузить так, как написано выше, то зачем они нужны? ведь по-хорошему, весь функционал идет через запросы, т.е. процессы,
значит нужно будет делать еще и так, чтобы в процессах тоже читались настройки шаблона или передавалось название шаблона что ль? А если подключать кастом
в процессах, то нафиг он вообще нужен для шаблона?

В ОБЩЕМ, ДЕЛАЕМ ТАК: пока оставим все как есть, займемся админкой, а как возникнет необходимость, будем реализовывать нужный функционал.

(!) ПОКА ВСЕ ПО-СТАРОМУ

Переход структур
================

Старая структура:

classes
	base
		htmlelement.php
	mobiledetect
		Mobile_Detect.php
		...
	safemysql
		safemysql.php
	simpleimage
		simpleimage.php
functions
	base
		data.php
		files.php
		functions.php
		math.php
	custom
		custom.php
	local
		functions.php
	mysqli
		functions.php
	pdo
		functions.php

Новая структура:

classes
	htmlelement
		htmlelement.php
	Mobile_Detect
		Mobile_Detect.php
custom
	safemysql
		safemysql.php
	simpleimage
		simpleimage.php
	custom
		custom.php
functions
	data.php
	files.php
	functions.php -> system.php
	math.php
drivers
	local
		functions.php
	mysqli
		functions.php
	pdo
		functions.php















