==============
Система защиты
==============

Принципы безопасности изложены в <принципы>соответствующем разделе.

Здесь мы просто перечислим существующие механизмы защиты сайта от взлома и получения данных.

==========
Шифрование
==========

В системе есть алгоритм шифрования. Нельзя достаточно корректно определить степень его безопасности, но данные, которые передаются подвергаются некоторым изменениям.

Узкое место безопасности - оно же главное требование к алгоритму - чтобы эти данные можно было расшифровать. Соответственно, если злоумышленник получит данные и корректно определит данную CMS и ее версию, он легко может найти алгоритм и дешифровать полученные данные, т.к. код данной CMS находится в открытом доступе.

Однако, подобная схема будет небезопасна на любой CMS.

(!) В дальнейшем алгоритм дополнится солью для расшифровки, которую пользователь сам задает для своих данных. Может быть, данная соль будет храниться в отдельной переменной, которую пользователь отдает при входе в систему, по типу пароля. Однако здесь будет идти речь о безопасности хранения и передачи данной переменной.

===========
Хеширование
===========

Наша система использует внутреннюю функцию php для хеширования паролей. Она является частью алгоритма шифрования, но вызывается с определенными настройками и применяется не для всех случаев.

==========================
Защита передаваемых данных
==========================

Для защиты данных, передающихся от пользователей по запросам post и get, в системе существует функция, которая производит фильтр и очистку этих данных. Подробнее в разделах <функции> и <запросы>запросы.

===================================
Определение подозрительных запросов
===================================

Все запросы к сайту <запросы>стандартизированы системой.

Однако можно представить ситуацию, когда запрос, кажущийся вроде бы корректным, передается с другого ресурса. Это может быть подозрительным.

Наша система определяет источник запроса из данных сервера и по нескольким признакам позволяет определить, поступил ли запрос извне. Подобные запросы система считает подозрительными. На них срабатывает механизм защиты, который в лучшем случае просто переводит пользователя на страницу с <ошибки>ошибкой, а в худшем - блокирует доступ к сайту по ip.

(!) Механизм блокировки доступа по ip на данный момент подвергается ревизии и в текущей версии не работает.

=======================
Защита файловой системы
=======================

Файловая система частично защищена путем установок нескольких папок и файлов в режим только для чтения.

(!) Данная информация для текущей версии неточна. Сейчас все папки и файлы преимущественно открыты для записи и исполнения владельцем.

Но большая защита обеспечена благодаря настройкам файла [htaccess]. Они запрещают индексировать папки, а также запрещают обращение к любым файлам с расширением [*.php], кроме [index.php]. Тем не менее, единственные файлы [index.php], присутствующие в системе - это файл, лежащий в корневой папке сайта и файл, лежащий в папке администратора, определенной константой <переменные>NAME_ADMINISTRATOR.

(!) Возможно, стоит заполнить все папки пустыми файлами [index.php], защищенными от записи.

==================
Защита базы данных
==================

База данных уже защищена тем, что большинство используемых данных хранятся в формате json.

При обращении к базе данных через системную функцию, также происходит правильный разбор, фильтрация и чистка всех входящих и исходящих запросов.

Короме того, для работы с базами данных система использует библиотеки PDO и SafeMySQL, которые подготавливают запросы и также делают их безопасными.

==========================
Защита данных пользователя
==========================

Фактически, защита данных пользователя состоит из трех компонентов, которые уже были перечислены выше:

	- защита базы данных
	- защита передаваемых данных
	- шифрование

У пользователя считываются только те данные, которые разрешены настройками системы. Эти данные также могут быть в зашифрованном виде. Ну и передача их осуществляется через post и get-запросы.

Стоит учесть, что алгоритм шифрования изначально разрабатывался для небольших объемов данных. И если пользовательские данные будут включать документы или медиафайлы, то возможно, стоит использовать иные средства защиты. Например, сжатие в архив с паролем, применение сертификатов или использование защищенных каналов передачи данных.

==============
Защита от DDoS
==============

Полностью обеспечить защиту от DDoS-атак невозможно. Однако даже просто большой поток спам-запросов, корректных с технической точки зрения, способен заблокировать ваш сайт всвязи с превышением лимитов. И это будет автоматическим действием со стороны хостинг-провайдера.

Для облегчения нагрузки механизм проверки запросов активируется до всех прочих обработчиков. А механизм проверки на ошибки еще раньше.

(!) В дальнейшем, возможно, будет реализован фильтр, определяющий спам-запросы, записывающий информацию в лог и автоматически включающий перенаправление на ошибку.
