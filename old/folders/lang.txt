=====
Языки
=====

Для упрощения, языковые файлы, языковые параметры, языковые переменные, коды языков, далее будем называть языки.

<переменные>$lang - главная переменная языков, используемая в качестве объекта (object).

Содержит все основные языковые названия, как например заголовок сайта, слоган, телефоны, названия кнопок и т.п.

Язык сайта определяется на основании языковых настроек браузера.

(!) На данный момент не реализовано отключение языков, которое может облегчить загрузку сайта, если сайт не планируется быть мультиязычным.

================
Установка языков
================

Ваш сайт может быть одноязычным, но его также очень легко сделать мультиязычным.

Все возможные языки прописываются в <настройки>languages.ini

	"langs" : {
		"ru" : ["ru", "be", "uk", "ky", "ab", "mo", "et", "lv"],
		"en" : ["en", "de"]
	},
	"codes" : {
		"ru" : "ru_RU",
		"en" : "en_US"
	}

В разделе "langs" вы указываете код языка и перечисляете в массиве, для каких языков браузера будет установлен данный код.

В разделе "codes" вы указываете расширенный языковой код для каждого кода языка. Если код языка явно не указан, он будет сформирован автоматически, добавлением через нижнее подчеркивание того же кода, но заглавными буквами.

(!) Например, если бы приведенный выше массив 'codes' был пустой, автоматически создались бы коды: "ru" : "ru_RU", "en" : "en_EN".

Язык сайта по-умолчанию зависит от константы <переменные>ROOT_LANG, которая может иметь значение одного из кодов языка из раздела "langs" или значение "auto", при котором по-умолчанию будет назначен язык браузера.

===============
Загрузка языков
===============

Загрузка языков происходит в три этапа:

	- инициализация, определение языка при загрузке сайта
	- загрузка файлов и настроек в <шаблон>шаблонизаторе, после <роутер>роутера и <параметры шаблона>разбора параметров, но перед непосредственно загрузкой шаблона
	- непосредственно подстановка значений при формировании страницы сайта

(!) На каждый этап можно повлиять отдельно. Но централизованного управления <настройки>всеми параметрами языков не существует. И это решение считаю правильным, потому что в разных случаях языки относятся к разным элементам сайта.

(!) В панеле <администрирование>администратора в будущем можно будет реализовать подобное управление из одного раздела, но это будет только для пользователя. С точки зрения архитектуры децентрализация языковых настроек так и останется.

Языки в шаблоне грузятся по следующей схеме:

	- если включено использование базового шаблона, то подгружаются языковые файлы из <базовый шаблон>базового шаблона, а именно [langcode.lng] и [langcode_common.lng]
	- затем идет подгрузка файла [langcode.lng] из текущего шаблона
	- эти языковые файлы объединяются в общий массив

Здесь "langcode" - это код языка, а не название файла и его нужно интерпретировать. Так, для английского языка это будут файлы [en.lng] и [en_common.lng], для русского - [ru.lng] и [ru_common.lng], и так далее.

Стоит отметить, что [langcode_common.lng] содержит те настройки, которые являются общими - например, настройки языка, отображения дат и времени.

Файлы разделены для удобства разработки, когда от проекта к проекту меняются частные настройки (заголовок, меню, адресная информация), а общие настройки остаются одинаковыми.

(!) Разделение на [langcode.lng] и [langcode_common.lng] существует только для <базовый шаблон>базового шаблона. Если базовый шаблон не используется, то подгружается только файл [langcode.lng] из папки текущего шаблона.

================
Настройка языков
================

Для того, чтобы использовать мультиязычность сайта, нужно при выводе текста использовать <переменные>объект $lang. Например, вместо "адрес: г. Москва, Красная площадь, дом 1" указывать {{ "<?= $lang -> common -> address; ?>: <?= $lang -> information -> address; ?>". Тогда из языковых настроек будут браться и подставляться соответствующие текущему языку данные:

	для русской версии будет выведено: "адрес: г. Москва, Красная площадь, дом 1",
	для английской версии будет выведено: "address: 1 Krasnaya pl., Moscow",

Мультиязычность сайта также поддерживается в <контент>материалах и предустановленных <модули>модулях.

Для этого достаточно включить в код параметров разделы с языковыми кодами.

Например массив {{ { "answer" : { "ru" : "привет", "en" : "hello" } } }} после обработки примет вид:

	- если на сайте установлен английский язык - {{ { "answer" : "hello" } }}
	- если на сайте установлен русский язык - {{ { "answer" : "привет" } }}

(!) Данная возможность реализуется через функцию datareplacelang, но на текущий момент функция вызывается в коде обработки отдельных <модули>модулей. Т.е. мультиязычность в данном случае зависит от реализации каждого отдельно взятого модуля, а не от системы в целом. Это плохо, т.к. не отвечает политике <принципы>автоматизации. В следующей версии обработка datareplacelang будет вызываться автоматически для каждого модуля при чтении его настроек. Но обработка контента, например, в модуле вывода материалов, все-таки останется в коде модуля. Возможно также, что эта функция будет переименована.

============
Кастомизация
============

Существующие установки для каждого языка можно менять по своему усмотрению.

Однако чтобы не затронуть какую-либо системную информацию, в объекте $lang предусмотрен раздел, где могут храниться только пользовательские переменные. Это раздел "names", вызывается {{ $lang -> names -> ... }}

По-умолчанию он пустой.

=======
Словарь
=======

Словарь - это одна из составляющих языковой части сайта, которая учит сайт языку пользователя.

Включение словаря происходит при включении в <параметры шаблона>параметрах шаблона опции "dictionary". Иначе словарь недоступен, а все связанные с ним функции просто будут возвращать исходное слово.

Сам словарь как элемент сайта представляет собой файл [langcode.dic], хранящийся в языковой папке шаблона. Он имеет те же принципы работы, что и языковой файл и подгружается по тем же правилам (учитывая базовый шаблон и т.д.).

Сам словарь как понятие включает в себя <переменные>две переменные:

	$dictionary - массив словаря, где хранятся слова всех нужных форм
	$morph - объект, содержащий настройки словаря

Однако словарь тесно связан с <переменные>объектом $lang, где по-идее и задаются слова.

=======
Морфинг
=======

Собственно, $morph - это часть объекта $lang, которая была вынесена в отдельный объект для оптимизации расходования ресурсов. По тем же причинам $dictionary не был включен в общий объект $lang.

(!) Дело в том, что изначально объекты не находятся в глобальной области видимости, поэтому функции по работе со словарем, которым нужно использовать настройки, эти объекты не видят. А переносить их в глобальную область видимости может быть слишком затратно, т.к. и $lang и $dictionary сами по себе очень объемные и занимают много памяти. Поэтому было решено использовать для настроек словаря объект $morph, который легко подключить и проверить. А если в нем разрешено использование словаря, то тогда уже и подключается словарь.

Слово morph подразумевает morphing, морфинг, изменение, трансформацию, в данном случае - изменение формы слова.

Настройки <переменные>$morph содержатся в языковом файле [*.lng] шаблона, в разделе "morph". Однако при загрузке сайта, они переносятся из объекта $lang в объект $morph и становятся доступны оттуда.

Это решение правильно, т.к. для разных языков могут быть совершенно разные настройки, разные грамматические правила и разные словари.

В общем и целом, morph содержит две описательные части:
	
	declension - склонение (или, например, спряжение) слов, грубо говоря, это базовые изменения формы слова
	forms - это другие формы слова, в основном подразумевается, что это числа и роды
	parts - здесь указываются более глобальные изменения формы слов, например, слова образующие разные части речи

=========================
Примеры настройки словаря
=========================

В русском словаре declension для существительных имеет шесть прописанных форм - это падежи: именительный, родительный, дательный, винительный, творительный, предложный. Также четыре формы forms - это времена и роды: единственное число (если есть формы слова для разных родов, то здесь подразумевается единственное число мужского рода), множественное число, единственное число женского рода (если есть), единственное число среднего рода (если есть). И еще две (на данный момент) формы частей речи: существительное и прилагательное.

Настройки $morph:

	"morph" : {
		"declension" : ["i", "r", "d", "v", "t", "p"],
		"forms" : ["e", "m", "j", "s"],
		"parts" : ["sush", "pril"],
		"grammar" : {
			...
		}
	}

Вид слова из словаря:

	"один" : {
		"sush" : {
			"i" : ["один", "одни", "одна", "одно"],
			"r" : ["одного", "одних", "одной"],
			"d" : ["одному", "одним", "одной"],
			"v" : ["один", "одни", "одну"],
			"t" : ["одним", "одними", "одной"],
			"p" : ["одном", "одних", "одной"]
		},
		"pril" : {
			"i" : ["первый", "первые", "первая", "первое"],
			"r" : ["первого", "первых", "первой"],
			"d" : ["первому", "первым", "первой"],
			"v" : ["первый", "первые", "первую", "первое"],
			"t" : ["первым", "первыми", "первой"],
			"p" : ["первом", "первых", "первой"]
		}
	}

В словаре для какого-либо слова может быть не прописано форм, например так:

	"два" : {
		"i" : ["два", "двое", "две"],
		"r" : ["двух"],
		"d" : ["двум"],
		"v" : ["два"],
		"t" : ["двумя"],
		"p" : ["двух"]
	}

Тогда будет браться единственна существующая (или первая) форма. Эта логика распространяется на declension, forms и parts. Т.е. если была задана parts:pril, но ее нет в словаре, будет взята либо parts:sush либо parts не будет учитываться. Если была задана forms:m, но ее нет в словаре, будет взята первая forms. Если была задана declension:w, но ее также нет в словаре, будет взята первая существующая форма, т.е. declension:i. Если слово не задано в словаре, то оно просто вернется без изменения формы.

Форму слова можно задать через простой неассоциированный массив: {{ ["declension", "forms", "parts"] }}, пропуская ненужные формы (например, только {{ ["declension"] }} или {{ ["declension","","parts"] }}), либо в строке с двоеточием в качестве разделителя: {{ "declension:forms:parts" }}, также пропуская неужные формы (например, {{ "declension" }} или {{ "declension::parts" }})

Также в настройки морфера включены правила грамматики, которые обрабатывают различные функции, например, функция преобразования чисел и дат в текст.

Пример фрагмента для русского языка:

	"grammar" : {
		"numbers" : {
			"base" : ["skip", false, "skip"],           базовые значения
			"first" : {                                 для чисел до 100 и если не указаны другие, для них тоже
				"one" : ["skip", "e", "skip", true],    для единиц, + разрешение выводить 1
				"minmax" : ["skip", "m", "skip", 2, 4], для диапазона чисел, + мин/макс - рамки диапазона
				"all" : ["skip", "m", "skip"]           для всех остальных
			},
			"hundred" : {                               для чисел от 100 (по-умолчанию здесь пропущено
			},                                          и тогда идут настройки из раздела first)
			"thousand" : {                              для чисел от тычячи
				"one" : ["skip", "e", "skip", true],
				"minmax" : ["skip", "j", "skip", 2, 4],
				"all" : ["skip:r", "j:m", "skip"]
			},
			"million" : {                              для чисел от миллиона
				"one" : ["skip", "e", "skip", true],
				"minmax" : ["skip", "s", "skip", 2, 4],
				"all" : ["r", "m", "skip"]
			}
		},
		"dates" : {
			"base" : ["skip", "skip", "pril"],
			"first" : {
				"one" : ["skip", "e", "skip", true],
				"minmax" : ["skip", "e", "skip", 2, 4],
				"all" : ["skip", "e", "skip"]
			},
			"hundred" : {
				"one" : ["skip", "e", false, false],
				"minmax" : ["i", "j", false, 2, 4],
				"all" : ["skip", "m", false]
			},
			"thousand" : {
				"one" : ["skip", "e", false, false],
				"minmax" : ["i", "j", false, 2, 4],
				"all" : ["skip", "m", false]
			},
			"million" : {
				"one" : ["i", "e", false, true],
				"minmax" : ["i", "s", false, 2, 4],
				"all" : ["skip", "m", false]
			}
		}
	}

Здесь указаны грамматические правила для чисел ("numbers") и для дат ("dates"). Если в вашем языке правила для дат и для чисел одинаковые - даты можно исключить из правил, и тогда для дат будут использоваться те же настройки, что и для чисел.

Правила грамматики:

	[0] - падеж (declension)
	[1] - число, род (forms)
	[2] - часть речи (parts)

Допустимые значения: "false", "skip" или значение из "declension", "forms", "parts" соответственно. Если вам нужно разделить грамматические правила для единиц и названия разряда, то прописывайте их, разделив двоеточием.

Чтобы понять, как это работает, просклоняем тысячу и миллион от 1 до 5

	Для тысяч:
	И.п. (есть) одна тысяча, две-три-четыре тысячи, пять тысяч
	Р.п. (нет) одной тысячи, двух-трех-четырех тысяч, пяти тысяч
	И.п. 1 ie, 2-3-4 re, 5 rm
	Р.п. 1 re, 2-3-4 rm, 5 rm
	
	Для миллионов:
	И.п. (есть) один миллион, два-три-четыре миллиона, пять миллионов
	Р.п. (нет) одного миллиона, двух-трех-четырех миллионов, пяти миллионов
	И.п. 1 ie, 2-3-4 re, 5 rm
	Р.п. 1 re, 2-3-4 rm, 5 rm
	
	Например, для 5000 - "пять" склоняется по правилам наследования,
	а "тысяч" всегда будет в родительном падеже множественного числа,
	тогда в настройках пропишем:
	
	{{ ["skip:r", "e:m", "skip"] }}
	И.п.: (есть) пять тысяч
	Р.п.: (нет) пяти тысяч
	
	иначе было бы:
	{{ ["skip", "e", "skip"] }}
	И.п.: (есть) пять тысяча
	Р.п.: (нет) пяти тысяча
	
	или так:
	{{ ["r", "m", "skip"] }}
	И.п.: (есть) пяти тысяч
	Р.п.: (нет) пяти тысяч

Для некоторых случаев указывается дополнительные 4-й и 5-й пункты.

Так, для правила "one" есть 4й пункт "true"/"false", который разрешает или запрещает выводить единицу. Например: "одна тысяча" или просто "тысяча".

Для правила "minmax" 4й и 5й пункты устанавливают диапазон чисел, к которым применяется это правило. Так, например, в русском языке числительные и прилагательные, соответствующие 1, имеют единственное число. Соответствующие 2, 3 и 4 имеют множественное число в именительном падеже, а начиная с 5 - то же множественное число, но уже в родительном падеже.

Данная структура позволяет разработать любые формы изменения слова для большинства языков.

(!) На данный момент обрабатываются только целые числительные до миллиона. Возможно, дальше будет включен миллиард и выше. Возможно также, что далее будет сделан вывод десятичных долей, например "пять десятых", "тридцать восемь сотых" и т.д.

(!) В дальнейшем структура может дополнится новыми правилами.

==========================
Функции работы со словарем
==========================

Основная функция по работе со словарем:

	{{ datamorpher($target, $arrOut = false) }}

А также есть функции, которые используют правила грамматики, например:

	{{ datanum($target, $convert = false, $multiply = false) }}
	{{ datanumgrammar(...) }}

(!) Наверное, в последующем все языковые функции будут вынесены в отдельный файл и в отдельный блок.

(!) Также возможна оптимизация языковых объектов $lang, $morph, $dictionary
