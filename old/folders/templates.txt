============
Шаблонизатор
============

Основной элемент нашей системы - это шаблонизатор. Он представляет собой файл-обработчик всех данных, которые необходимы для правильной загрузки шаблона.

Он был разработан следуя <принципы>основному принципу системы и потому должен представлять максимальное удобство работы как для разработчика, так и для верстальщика, и для администратора, и для контент-менеджера.

Шаблонизатор позволяет автоматизировать процесс загрузки и управления сайтом. По-сути, все что нужно сделать верстальщику - скопировать сделанный шаблон и вставить в разные его части необходимые переменные и функции (например, функцию вызова модуля).

Также за счет <библиотеки>библиотек шаблонизатор позволяет использовать такие технологии, как "bootstrap", "jquery", "less" и любые другие, даже те, которые не предустановлены по-умолчанию.

Гибкость шаблонизатора заключается в возможности использования как одного шаблона для всего сайта, так и нескольких шаблонов для разных разделов. При этом, если вам нужно сохранить общий стиль, существует <базовый шаблон>базовый шаблон.

=====================
Инициализация шаблона
=====================

<переменные>$template - главная переменная шаблона, используемая в качестве объекта (object)

	$template = (object) array(
		"name" => "default",
		"lang" => "",
		"langcode" => "",
		"langs" => array()
		"url" => (((isset($_SERVER["REQUEST_SCHEME"]) && $_SERVER["REQUEST_SCHEME"] === "https") || (isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"] === "on")) ? "https" : "http") . "://" . $_SERVER["SERVER_NAME"] . (($_SERVER["SERVER_PORT"] != 80) ? ":" . $_SERVER["SERVER_PORT"] : ""),
		"site" => $_SERVER["SERVER_NAME"],
		"structure" => array(),
		"router" => (object) array(),
		"curr" => (object) array(
			"url" => "",
			"php" => "",
			"html" => "",
			"inner" => "",
			"page" => "",
			"path" => ""
		),
		"base" => (object) array(
			"url" => "",
			"php" => "",
			"item" => (object) array()
		),
		"administrator" => false,
		"libraries" => array(),
		"options" => array(),
		"css" => array(),
		"js" => array(),
		"less" => array(),
		"special" => array(),
		"seo" => (object) array(),
		"device" => (object) array(
			"type" => "",
			"os" => "",
		),
		"var" => array()
	)

==================
Описание структуры
==================

name - название текущего используемого шаблона, по-умолчанию, default.
	
	На данный момент автоматического переключения между шаблонами и замещения шаблонов, как это было в старой версии, не происходит, вместо этого они добавляются в структуру и по желанию можно заходить в соответствующие папки, которые и будут интерпретироваться роутером как шаблоны.
	По-сути, теперь происходит простое разграничение доступа к шаблонам <переменные>PERSONAL и <переменные>PRIVATE, а также <переменные>ADMINISTRATOR
	
	<пользователи>$_COOKIE["UID"] переключает его в <переменные>NAME_PERSONAL
	<пользователи>$_COOKIE["PID"] переключает его в <переменные>NAME_PRIVATE
	
<языки>lang - текущий язык сайта (например, "ru", "en"), зависит от константы <переменные>ROOT_LANG.
<языки>langcode - код региона языка (например, для "ru" - "ru_RU", для "en" - "en_US")
<языки>langs - массив со списком допустимых на сайте языков
url - базовая ссылка сайта вида http://site.com
site - ссылка сайта вида site.com
<структура>structure - дерево структуры сайта
<роутер>router - данные пути из роутера: "lang", "template", "types", "folders", "page", "parameters"
	
	название текущей страницы брать отсюда: {{ $template -> router -> page }}
	количество папок брать так: {{ count($template -> router -> folders) }}
	название первой папки брать так: {{ reset($template -> router -> folders) }}
	название последней папки брать так: {{ end($template -> router -> folders) }}
	тип текущей папки или страницы брать так: {{ $template -> router -> types[$item] }} с обязательной проверкой ключа массива, т.е.: {{ if (array_key_exists($item, $template -> router -> types) && ...) }}
	
curr - значения текущего шаблона
	
	url - абсолютная url-ссылка на текущий шаблон
	php - php-ссылка на текущий шаблон от корня сервера
	inner - относительная ссылка на папку внутренних страниц
	html - ссылка на папку html текущего шаблона
	path - относительный путь к странице согласно роутеру в формате url
	page - абсолютный путь к странице согласно роутеру в формате php
	
<базовый шаблон>base - значения базового шаблона
	
	url - абсолютная ссылка на базовый шаблон
	php - php-ссылка на базовый шаблон, от корня сервера
	item - элементы базового шаблона, по сути это автоматические ссылки на файлы в папке /item/ базового шаблона. Например, сейчас - это:
	
		breadcrumbs - временная замена модуля breadcrumbs
		cssjs - подключение скриптов и стилей
		cookiesagree - страница с информацией о необходимости принятия cookies
		ending - универсальная страница завершения
		favicon - подключение иконок сайта
		frontend - вывод оболочки админки для просмотра в режиме фронтэнда (шаблон frontend в папке админки)
		less - подключение файлов less
		libraries - подключение библиотек
		inspectstart - замер временной метки старта выполнения скриптов (желательно сразу после тега head)
		inspectend - замер временной метки окончания выполнения скриптов и вывод результатов (желательно в самом конце, перед закрывающим тегом body)
		meta - подключение мета-тегов
		nopage - страница с информацией об отсутствии страницы
		opening - универсальная страница открытия
		routing - автозагрузчик главной и внутренних страниц шаблона
		social - вывод ссылок на соцсети
		libraries - список библиотек, используемых в текущем шаблоне: для загрузки старых версий bootstrap 3.3.7 и jquery 1.12 используйте bootstrap3 и jqueryold
	
<параметры шаблона>options - список параметров текущего шаблона
<файловая структура шаблона>css - список файлов стилей, используемых в текущем шаблоне
<файловая структура шаблона>js - список скриптов, используемых в текущем шаблоне
<файловая структура шаблона>less - список less-файлов, используемых в текущем шаблоне
special - список специальных страниц, используется для их определения и совершения какого-либо действия, применения специальных стилей и классов и т.п. Например: {{ if (is_array($template -> special) && in_array($template -> router -> page, $template -> special)) {...} }}
<сео>seo - список seo-параметров, сформированных из файлов [seo.ini] текущего и базового шаблонов
device - параметры устройства, на котором открыт сайт, включается только если задан параметр "mobiledetect"
	type - тип устройства: "tablet" - планшет, "mobile" - смартфон, "desktop" - компьютер
	os - операционная система: "windowsphone", "ios", "android"
<переменные>var - зачастую бывает нужно использовать переменные для передачи информации, например, между модулями или использовать временные переменные, которые потом можно легко очищать, для этого и существует это хранилище переменных. Очищается так: {{ $template -> var = [] }};

==============
Папки шаблонов
==============

/administrator/ - шаблон панели администратора. Название зависит от константы <переменные>NAME_ADMINISTRATOR.
/base/ - <базовый шаблон>базовый шаблон. Подробнее <базовый шаблон>см. соответствующий раздел.
/default/ - шаблон, который грузится по-умолчанию, в том числе для главной страницы сайта.
/errors/ - <ошибки>шаблон страниц ошибок.
/personal/ - <пользователи>шаблон персональной части сайта, только для зарегистрированных пользователей. Название зависит от константы <переменные>NAME_PERSONAL.
/private/ - <пользователи>шаблон закрытой части сайта, доступ в которую разрешен только некоторым пользователям. Например, это может быть та часть сайта, которая открывается за отдельную плату. Для новостного портала это может быть раздел для авторов, пишущих статьи. Название зависит от константы <переменные>NAME_PRIVATE.
/restore/ - <пользователи>шаблон страницы восстановления доступа после блокировки аккаунта.

=============
Папки страниц
=============

/html/ - папка вспомогательных файлов шаблона
	
	Например, если разбить шаблон на части - заголовок, меню, содержимое и подвал - в виде отдельных файлов, то удобнее всего хранить эти части в отдельной папке шаблона.
	
/html/inner/ - папка содержимого шаблона
	
	Файлы и папки в ней соответствуют файлам и папкам, полученным в роутере (home - для главной).
	
/html/head/ - папка дополнительных параметров в head страницы.
	
	Если вы хотите, чтобы содержимое внутри тегов {{ <head>...</head> }} было разным для разных страниц, просто поместите соответствующие файлы в эту папку. Названия подключаемых файлов должны соответствовать имени страницы (home - для всех).
	
/html/wrapper/ - папка оберток главной и внутренних страниц, нужна если используется базовый роутинг.
	
	Если вам нужно сделать отдельные обертки содержимого для главной и всех внутренних страниц шаблона, используйте файлы в этой папке:
	
		[home_before.php] - начальная обертка для главной страницы, до контента
		[home_after.php] - конечная обертка для главной страницы, после контента
		[inner_before.php] - начальная обертка для главной страницы, до контента
		[inner_after.php] - конечная обертка для главной страницы, после контента
	
==========================
Папки и файлы по-умолчанию
==========================

/css/ - папка стилей
/fonts/ - папка шрифтов
/js/ - папка скриптов javascript
<языки>/lang/ - папка с языковыми файлами шаблона
/less/ - папка стилей в формате less

[template.php] - файл шаблона, собственно говоря с него и начинается визуализация сайта
<secure php>[secure.php] - файл защищенных операций до загрузки шаблона
<параметры шаблона>[settings.ini] - файл настроек шаблона
<сео>[seo.ini] - файл СЕО-параметров для всего шаблона и отдельных его страниц

[*.сss] - для базового шаблона: "style" и "mobile", если включен "mobiledetect", для текущего шаблона - "template"
[*.less] - так же, как и css
[*.js] - script как для текущего, так и для базового шаблонов

Для каждой страницы шаблона, при наличии, подгружаются файлы [css], [less] и [js] с таким же названием

=========
Параметры
=========

baseset - при включении будет использоваться <базовый шаблон>базовый шаблон.
	
	Хотя он прописан в параметрах переменной "template" и так, но этот параметр дает обертку текущему шаблону, позволяя использовать общие элементы для разных шаблонов сайта.
	
secure - при включении подгружается специальный файл <secure php>[secure.php], который лежит в корне текущего шаблона. Этот файл, например, содержит обращения к профилю пользователя и по-идее является защищенным.
	
	(!) параметр устаревший, теперь ни на что не влияет, а файл [secure.php] грузится через шаблон по спец.условиям
	
cookiesagree - при включении загружается специальный блок, который предоставляет информацию о принятии cookies.
autoseo - при включении подключается специальный <сео>сео-процессор, который автоматически генерирует множество сео-тегов и их значений.
mobiledetect - включает идентификацию мобильных устройств и заполняет соответствующие поля шаблона, что позволяет подключить разные стили и скрипты для разных устройств.
inspect - при загрузке собирается служебная информация, например, о времени загрузки страницы и скриптов, библиотеках, модулях, параметрах шаблона, роутинга, а также данных сервера.
	
	Подробная информация выдается в консоли javascript (в средствах разработки или отладки, или просмотра кода практически любого браузера).
	
dictionary - включает загрузку <словарь>словаря и параметров <морфинг>морфинга слов.
develop - специальный режим, в котором не грузятся из базового шаблона элементы "opening" и "ending".
	
	Этот режим был сделан специально для <установка шаблона>установки стороннего шаблона на сайт. Например, при переносе сайта с другого движка или адаптации шаблона, но когда сам базовый шаблон еще не готов.
	
	Необходимо использовать его вместе с параметром baseset.
	
=====
Стили
=====

Приоритетом в загрузке пользуются стили с базовыми именами. Порядок приоритета по возрастающей:

[style.css] - файл стилей для базового шаблона
[mobile.css] - файл стилей мобильного представления для базового шаблона, который подгружается после [style.css] (но не вместо него!)
[template.css] - файл стилей для текущего шаблона

Также подгружаются стили из папки /css/ текущего шаблона, указанные в настройках шаблона.

Помимо этого, если в папке /css/ есть файл стилей, который совпадает с названием текущей страницы ($template -> router -> page), то он также подгружаются поверх остальных.

Стили less имеют меньший приоритет, чем css. Грузятся они по той же схеме.

(!) На данный момент используется старая версия библиотеки lessphp 0.4.0, что вносит свои особенности использования конвертации.

(!) На данный момент нет поддержки scss/sass

=======
Скрипты
=======

Скрипты загружаются аналогичным образом из папки /js/.

Только базовый файл у скриптов один - [script.js], однако он есть отдельно для базового и текущего шаблонов.

Все остальное совпадает.

=================
Системные шаблоны
=================

Есть несколько зарезервированных системой названий шаблонов.

	/errors/ - шаблон обработки <ошибки>ошибок
	/restore/ - шаблон с формой восстановления доступа к сайту после блокировки в целях <защита от взлома>безопасности
	
Эти два шаблона относятся к системным. Их инициализация и настройки не похожи на остальные шаблоны. Эти шаблоны загружаются до инициализации многих <переменные>объектов и <функции>функций. С ними не работает шаблонизатор. Они являются как бы сами по себе.

Если есть необходимость изменить вид этих шаблонов, не пользуйтесь <функции>функциями и <переменные>объектами системы, <библиотеки>билиотеками и <модули>модулями. Можно использовать константы. В остальном используйте только те файлы, которые находятся в папках внутри этих шаблонов. Все необходимые библиотеки, например, "jquery", просто скопируйте в папку шаблона и вызывайте непосредственно оттуда.

==============
Базовый шаблон
==============

Если у вас на сайте используется несколько шаблонов, в том числе шаблон для зарегистрированных пользователей, наверняка будут использоваться общие элементы вида. Вам не захочется прописывать их в шаблонах по нескольку раз, ведь при любом изменении, придется менять все шаблоны. Для этого и существует базовый шаблон.

Кроме того, в базовом шаблоне содержатся некоторые общие элементы для сайта, которые вы можете включить в любой шаблон, даже не подгружая базовый шаблон целиком. Они доступны из папки /item/.

Любая страница php, созданная вами и размещенная в этой папке, автоматически будет доступна для вызова как элемент.

Пример вызова: {{ require $template -> base -> item -> ... }} - где ... - название вашего файла (без расширения!).

===================
Страница secure.php
===================

Для шаблонов <переменные>PERSONAL и <переменные>PRIVATE есть возможность загружать спец. страницу [secure.php] - она загружается автоматически при соблюдении следующих условий:
	
	- если она есть в корневой папке шаблона,
	- если задан <переменные>UID или <переменные>PID соответственно
	- все проверки прошли успешно
	
Для чего существует эта страница? Например, для того, чтобы загрузить специальные данные пользователя, закрытые от посторонних.

Она считается защищенной благодаря настройкам [htaccess], роутингу и встроенному <защита от взлома>механизму определения некорректных запросов.
