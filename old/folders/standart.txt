=================
Основные принципы
=================

Данная система называется CMS, но по сути она является не столько системой управления контентом, сколько движком для построения сайтов.

Не стоит говорить о том, что на базе этой системы можно сделать любой сайт. Это наверняка не так, особенно без серьезных программных изменений. Тем не менее, мы хотим сделать все возможное, чтобы облегчить жизнь разработчикам.

Основные принципы данной системы:

	- автоматизация
	- кастомизация
	- ресурсоемкость
	- безопасность

О каждом из принципов будет подробно изложено ниже. Но сначала - небольшое отступление.

===========
Отступление
===========

Если посмотреть на то, что происходит сейчас в сети интернет, и сравнить полученную картину с тем, что было даже пять лет назад, не говоря уже о десяти годах, разница будет колоссальная. Мир цифровых технологий развивается настолько стремительно, что порой не успеваешь следить за всеми происходящими изменениями. Только люди, работающие внутри, погруженные в эту атмосферу достаточно плотно и тратящие много времени на пребывание там, чувствуют себя комфортно. Для других же любая попытка погружения похожа на попытку запрыгнуть с перрона в проносящийся мимо поезд.

Современным миров правят гики - те люди, которые раньше считались не от мира сего, над которыми посмеивались, а их увлечения в лучшем случае были непонятными, а в худшем напоминали какое-то колдовство. Теперь же такие люди - основатели многомиллиардных компаний, лица на обложках деловых журналов и лидеры различных рейтингов о самых богатых и влиятельных представителях поколения. Именно благодаря этим людям мы пользуемся технологиями, которые раньше считались чем-то из раздела фантастики. Но также благодаря им существует огромная пропасть между теми, кто "внутри" - разработчиками - и теми, кто "снаружи" - обычными пользователями.

Если говорить о сайтах в частности, то если раньше они были просто информационными тематическими страничками в сети интернет, то сейчас это огромные системы, предоставляющие товары и услуги на любой вкус. На сайтах можно покупать товары, смотреть фильмы и слушать музыку, читать книги, играть в игры, общаться с другими людьми. Также с точки зрения бизнеса сайты позволяют автоматизировать торговлю, избавиться от выставочных помещений, сэкономить на персонале, увеличить число покупателей, качественно обслужить каждого клиента и так далее.

Но реализовать это все не так-то и просто.

Я не буду затрагивать случаи с крупными компаниями, которые могут позволить себе отдельный штат специалистов на разработку и обслуживание системы, спроектированной под конкретные требования и нужды данной компании. Я коснусь малого бизнеса, частных предпринимателей и отдельно - разработчиков сайтов.

Малый бизнес сейчас испытывает большую конкуренцию практически в каждом сегменте. Постепенно он переходит в интернет ради увеличения числа потенциальных покупателей и, как следствие, прибыли. Но и здесь он сталкивается с проблемами. Конкуренция оказывается такой же, но играть приходится на совершенно новом поле. И если оставаться здесь, то нет другого выхода, кроме как обращаться к специалистам. Но и в таком случае конструктивного решения проблемы не получается. Ведь для решения проблем заказчика требуются временные ресурсы, и как следствие, большие деньги. Часть же проблем связана с проблемами самого заказчика, его бизнеса и его отношения к бизнесу.

Следствием такой ситуации становится компромисс, который выражается в использовании бесплатных или недорогих CMS, компонентов и расширений к ним и стоковых шаблонов. Основные средства уходят на настройку и запуск. А дальше все остается на месте. То есть запущенная система не развивается, а просто существует, поддерживаемая силами владельца. И как только возникает необходимость в обновлении, а скорость развития технологий сокращает это время, все начинается по-новой.

В такой ситуации собственники бизнеса предпочитают обращаться больше к сервисам (контрукторам сайтов, соцсетям), чем к специалистам, а компании-специалисты не имеют возможности успешно развиваться и иметь стабильный доход. Обе стороны становятся похожи на стаи птиц, которые постоянно летают от одной кормушки к другой. В результате страдают все. Бизнес меняет сервисы и сайты, нигде не успев толком закрепиться, теряя только установившийся поток клиентов, тратя нервы, время и деньги. Специалисты либо уходят в крупные компании, либо идут во фриланс, либо в штат. Но есть и случаи полного разочарования в современных технологиях, когда люди уходят в офлайн или меняют сферу деятельности.

Любая из этих ситуаций выглядит печальной.

Но невозможно, чтобы не было решения, которое позволит исправить ситуацию и облегчить жизнь.

Большинство из существующих сейчас систем, позволяющих делать сайты, страдают следующими симптомами:

	- все сделано хорошо с точки зрения разработчика системы, но неудобно пользователю
	- есть масса всяческих настроек, но они не позволяют реализовать требования заказчика
	- есть поддержка уже частично устаревших технологий или существующих, но через год они уже все будут устаревшими
	- чтобы внести необходимые изменения, нужно менять код, по-сути заново перепрограммировать часть системы
	- новые версии не вносят значительных обновлений, а те, которые вносят, требуют почти полной переделки сайта с нуля
	- новые версии системы оказываются не совместимыми со старыми версиями компонентов, а новые версии компонентов могут отсутствовать
	- система имеет множество неиспользуемых компонентов, в то время как нужные приходится покупать у сторонних разработчиков
	- все существующие компоненты необходимо настраивать, тем не менее они все равно не позволяют реализовать все требования заказчика
	- одни и те же библиотеки дублируются множество раз, т.к. каждый компонент, шаблон или модуль использует свою копию библиотеки
	- после нагрузки сайта всеми компонентами, шаблонами, изменениями и прочим, сайт становится неоптимизированным, начинает занимать очень много места и очень долго загружается

Автоматизация процессов в таких системах либо отсутствует, либо решена очень слабо. В результате, на простые операции, вроде внесения изменений в содержимое материалов, уходит значительная часть времени. То же касается адаптации шаблонов или переноса сайтов с одной системы на другую.

Например, для каждой стати нужно прописать СЕО-теги, которые будут являться просто содержимым части этой статьи. В большинстве систем это делается вручную для каждой статьи. Причем на изменение даже одной требуется от десяти действий и около 5 минут времени.

Другой пример. Для обновления цен на товары на сайте требуется открыть описание каждого товара и вручную поменять цену в нем. Возможно сделать это через сторонний компонент, но сторонний компонент обновляет все содержимое каталога товаров, включая изображения, описание, артикулы и порой происходят сбои, которые приводят к перестроению всего каталога. Так что каталог товаров после каждого обновления цены приходится заново перенастраивать на сайте.

Третий пример. Для синхронизации товаров между базой данных сайта и бухгалтерской программой был под заказ написан отдельный компонент. Но вышла новая версия программы и новая версия системы, на которой сделан сайт, для чего также потребовалось обновить версию php на стороне сервера. В результате компонент оказался нерабочим. И здесь речь не о сумме денег, а о потраченном времени.

Четвертый пример. Внешний вид статьи целиком и полностью зависит от редактора и контент-менеджера. Если статья была скопирована из word, то там так и останется форматирование текста. Чистка текста от лишних тегов требует внесения изменений в код системы, которые не сохраняются при обновлении. Конечно, это работа редактора, но тем не менее, ее можно автоматизировать.

Пятый пример. Установка шаблона на сайт требует адаптации изначальной верстки, а затем многочисленных корректировок при установке компонентов и изменении структуры сайта. Хотя это просто шаблон сайта. Да, так и есть в большинстве систем, но кто сказал, что так и должно быть?

Шестой пример. Если сайт требует использования различных вариантов дизайна в разных разделах, самым простым решением может стать использование нескольких шаблонов. Однако на сайте все равно присутствуют общие элементы. И когда они подвергаются изменениям, приходится их менять для каждого шаблона.

Все это должно отсутствовать в разрабатываемой нами системе.

Как говорилось вначале, мы живем при быстрой смене технологий. Поэтому система, которую мы используем, должна быть лишена всех этих недостатков. Она должна быть максимально гибкая, дружественная не только для разработчиков самой системы и компонентов к ней, но и для пользователя, и для всех разработчиков сайтов на этой системе - дизайнеров, верстальщиков, администраторов, менеджеров контента, СЕО-специалистов и прочих.

Для этого и были определены принципы, изложенные в первом пункте.

=============
Автоматизация
=============

Автоматизация - это упрощение процессов. Любых.

Не обязательно это касается разработки сайта на данной системе, иногда это касается и разработки самой системы.

Первый вопрос, который нужно решить, когда речь идет об упрощении процессов:

	"Так никто не делает или так делать нельзя?"

Второй вопрос:

	"Почему?"

Если причина будет достаточно веской, если она связана с техническими ограничениями или нарушением других основных принципов системы. Во всех остальных случаях можно считать, что автоматизация возможна. И это главное. Осталось решить, в каких случаях она будет целесообразна и как ее решить, обеспечив согласие с другими принципами.

============
Кастомизация
============

Можно было бы сказать, что одним из основных принципов было бы удобство для пользователя и разработчика. Но эти понятия слишком абстрактные. То, что удобно одному, другому может оказаться неудобным. Так почему бы не дать возможность настраивать систему так, как удобно каждому?

Конечно, здесь придется идти на ограничения и компромиссы, ведь если говорить о полной кастомизации, то можно упереться просто в изучение php и написание своей системы, и дело с концом.

К тому же разработчик никогда не заботится о пользователе, даже когда думает, что заботится. И это правильно, ведь каждый из них играет свою роль для сайта и компании.

Например, в текущем коде предусмотрен шаблон по-умолчанию для каждого модуля, в том числе для модуля меню. И в нем есть огромное число настроек. Но не все из них обязательно указывать. К тому же, если вам не нравится этот шаблон, вы можете создать свой - это совсем не сложно.

==============
Ресурсоемкость
==============

Оптимизация тоже является понятием свободным. Все системы поддерживают оптимизацию, но трактуют ее по-своему, что приводит к неожиданным результатам. Здесь все изложено предельно четко.

Системных ресурсов, которыми мы можем управлять, всего несколько:

	- оперативная память
	- производительность процессора
	- место на жестком диске
	- скорость обмена данными

В конце концов все эти ресурсы, как на стороне сервера, так и на стороне клиента, влияют на объем данных и скорость их обработки.

Поэтому ресурсоемкость должна обеспечивать самое выгодное использование ресурсов. Но не в жертву другим принципам.

Если же идет обновление какого-либо элемента сайта, то критичной разницей в показателях является 10% и более. Это значит, например, что новая версия модуля не должна превышать расход ресурсов больше чем на 10% относительно старой версии.

Следует помнить, что ресурсы системы должны быть рассчитаны на нагрузку сайта минимум 100 запросов одновременно и порядка 1 000 000 запросов ежедневно.

Также следует помнить, что часть операций по обработке данных на сайте можно переложить с сервера на сторону клиента, например, за счет javascript. Но так, чтобы эти операции были безопасны.

============
Безопасность
============

Нет нужды говорить много про безопасность и защиту данных. Нельзя также заявлять, что наша система обеспечивает полную безопасность.

Любой сайт может подвергнуться хакерской атаке, а технологии защиты устаревают также быстро, как и прочие.

В плане безопасности система должна обеспечивать:

	- использование актуальных методов защиты от известных методов взлома
	- возможность контроля доступа к сайту
	- защиту данных

Если кто-то очень сильно захочет испортить ваш сайт, он это сделает - не сомневайтесь. Поэтому защищаться имеет смысл только от тех методов, которые известны и распространены. Эта преграда отразит 99% попыток взлома.

Гораздо важнее, что если кто-то пытается взломать ваш сайт, вы должны это узнать. Значит, система должна уметь определять подозрительные запросы и записывать всю информацию о них, а также уведомлять администратора сайта.

Но самый важный вопрос:

	"Если злоумышленник все же получит доступ к сайту, что он там найдет?"

Например, он может получить адреса почтовых ящиков всех пользователей. А что, если эти адреса будут зашифрованы? Может получить пароли. А что, если там будут только их хэши?

Необходимо также понимание того, что нужно человеку, взломавшему ваш сайт. Ведь в 99% случаев это охота за контактами пользователей ради денег. Хакеры пытаются получить телефоны и email'ы, номера кредитных карт, пароли на случай, если пользователь имеет один и тот же пароль для разных сайтов, чтобы занести в базу и использовать в дальнейшем. Вся эта информация может быть использована ими для спам-рассылок, мошенничества с целью вымогательства денег и перепродажи базы контактов и адресов. И только в небольшой части случаев - это похищение данных, например, книг, фильмов, музыки.

Использование алгоритма шифрования таких данных предполагает наличие в система алгоритма дешифрования. Либо использование защищенных каналов передачи данных.

Весь комплекс работ по безопасности входит в <защита от взлома>соответствующий раздел.

===================
Сочетание принципов
===================

Следование принципам предполагает то, что при разработке системы учитываются все принципы сразу в равной мере.

Например, нет нужны урезать код проверок, который добавляет большую кастомизацию для выгадывания нескольких байт памяти. Но также и нет нужны добавлять излишнюю автоматизацию, которая серьезно затронет память и процессор.

Принципы могут исключать определенную часть сайта, над которой ведется разработка, до момента ее готовности.
