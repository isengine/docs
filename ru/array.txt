список функций:

возврат первой/последней/n-ной пары ключ:значение из объекта с удалением и без
возврат среза массива-объекта от x-номер до y-номера или от x-номера длиной n-номеров с удалением и без
вставить на какое-то место (в начало/в конец/на n-ную позицию) новую пару ключ:значение или несколько таких пар
вставить вместо диапазона новую пару ключ:значение или несколько таких пар

назначить новые ключи - это особое вообще явление:
если элементов меньше, к ключам добавляются пустые значения,
если элементов больше, чем ключей, то лишние обрезаются

три вида массивов:
1. default
	{
		ключ1:значение1,
		ключ2:значение2,
		ключ3:значение3
	}
2. combine
	{
		ключ1,
		значение1
	},
	{
		ключ2,
		значение2
	},
	{
		ключ3,
		значение3
	}
3. separate
	{
		ключ1,
		ключ2,
		ключ3
	},
	{
		значение1,
		значение2,
		значение3
	}
преобразование между этими видами

проверка что это массив и он не пустой

количество верхних элементов массива
общее количество всех элементов массива

найти совпадения в массиве
посчитать число совпадений в массиве

найти значение по ключу
найти ключ по значению

объединить массивы с рекурсией
то же, но кроме пустых элементов и без повторений

перевести данные в массив - есть
перевести обратно, из массива в строку

код/декод json

---

операции со строками

в первую очередь, поиск и фильтрация

а для них работа с регулярками:
match/find
replace

поиск элемента, подстроки в строке

синтаксис поиска:

заданное значение
либо массив значений

тип поиска значения
	поиск в диапазоне между значениями массива
	поиск точного совпадения
	поиск вхождения подстроки в стоку



and - задает массив значений, которые должны совпадать по and
or - задает массив значений, одно из которых должно совпадать
except - задает массив значений, которые должны быть пропущены

string - поиск значений из массива на совпадение внутри строки


// работа filter:
// по-умолчанию выборка идет по and, но вы можете установить тип выборки в параметре or - если не задан (по-умолчанию), 0 или false - тогда and, иначе - or
// вы указываете сколько угодно значений через двоеточие и сколько угодно полей для выборки через пробел, запятую или точку с запятой
// например такая строка
//   'one:1:2 two:a:b:c'
// будет разобрана в массив
//   { 'one' : ['1', '2'], 'two' : ['a', 'b', 'c'] }
// если же вы хотите задать выборку всех непустых полей (т.е. всех полей, кроме пустых, и неважно чем они заполнены),
// используйте поле без значений
//   'one two:a:b:c' или 'one: two:a:b:c'
// если вы хотите использовать точное совпадение всех элементов, используйте для перебора вместо двоеточия ':' знак плюс '+'
//   'one:1+2 two:a+b+c'
// например, этот фильтр используется в работе контента для применения точного совпадения по родителям
// если вы хотите, чтобы в поиске были выданы данные, у которых совпадает только один элемент из перечисленных, используйте вначале каждого значения знак плюс '+'
//   'one:+1:+2 two:+a:+b:+c' или для одного значения 'one:+1'
// если вы хотите, чтобы в поиске были выданы данные, у которых отсутствуют перечисленные элементы, используйте вначале каждого значения знак минус '-'
//   'one:-1:-2 two:-a:-b:-c' или для одного значения 'one:-1'
// если вы хотите использовать поиск строки, используйте оператор '*'
//   'one:search*' или 'one:*search'
// если вы хотите использовать поиск строки в массиве, используйте оператор '>'
//   'one:search>' или 'one:>search'
//   такая запись даст вам все строки, где one - массив и он содержит значение search с любым ключом
// если вы хотите использовать поиск чисел в диапазоне, используйте оператор '_'
//   'one:1_' - даст все значения, равные и больше 1
//   'one:_10' - даст все значения, равные и меньше 10, в т.ч. отрицательные
//   'one:1_10' - даст все значения от 1 до 10 включительно
// данный оператор работает также
//   с числами c десятичными долями (числа с плавающей точкой вида 0.1)
//   с отрицательными числами
// будьте внимательны:
//   все сравниваемые строки будут преобразованы в число
//   пробелы уберутся
//   запятые автоматически преобразуются в точки
//   точки будут считаться разделителями десятичных долей, а не разрядов
// например:
//   10.000 будет преобразовано в 10
//   0,5 будет преобразовано в 0.5
//   false будет преобразовано в 0
//   true будет преобразовано в 1
//   'string' будет преобразовано в 0
// если вы хотите найти строку с нижним подчеркиванием или знаком больше, используйте оператор '*', т.к. он имеет приоритет:
//   '*_' или '_*' или '*>' или '>*'
//   '*_string' или '_string*' или '*>string' или '>string*'
//   '*string_' или 'string_*' или '*string>' или 'string>*'


---

отдельная тема - post/get запросы
для php это будут запросы, для js - метод ajax (fetch)

сюда же формирование правильного запроса

---
